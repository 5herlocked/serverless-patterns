AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Centralized API

Parameters:
  ValidationKey:
    Description: "Header value inserted on central API and validated on sub APIs"
    Type: String

Resources:
  ## Centralized primary API
  PrimaryApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Centralized-Primary
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: './api.yaml'
        
  ## Reporting application API Endpoint
  ReportingApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Centralized-ReportingApi
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/Prod/GET/'
            - Effect: Deny
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/Prod/GET/'
              Condition:
                StringNotEquals:
                  'aws:Referer': !Ref ValidationKey
                  
  ## User management application API Endpoint
  UserManagementApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Centralized-UserManagementApi
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*/Prod/GET/'
            - Effect: Deny
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*/Prod/GET/'
              Condition:
                StringNotEquals:
                  'aws:Referer': !Ref ValidationKey
                  
  ## Reporting application Lambda function
  ReportingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: nodejs14.x
      CodeUri: src
      Environment:
        Variables:
          LOCATION: "Response from reporting application"
      Events:
        RestApi:
          Type: Api
          Properties:
            RestApiId: !Ref ReportingApi
            Method: GET
            Path: /
                  
  ## User management Lambda function
  UserManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: nodejs14.x
      CodeUri: src
      Environment:
        Variables:
          LOCATION: "Response from user management application"
      Events:
        RestApi:
          Type: Api
          Properties:
            RestApiId: !Ref UserManagementApi
            Method: GET
            Path: /
  
Outputs:
  ReportingEndpoint:
    Description: Reporting API endpoint
    Value: !Sub "https://${ReportingApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  UserManagementEndpoint:
    Description: User management API endpoint
    Value: !Sub "https://${UserManagementApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  PrimaryApiEndpoint:
    Description: Primary API endpoint
    Value: !Sub "https://${PrimaryApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"